Why writing to registry under software on win64 writes to HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node ?


When a 32-bit application runs on a 64-bit version of Windows, the operating system uses a feature called Windows-on-Windows 64-bit (WOW64) to provide compatibility. This allows 32-bit applications to run on a 64-bit system without modification.

One aspect of this compatibility is related to the Windows Registry. The registry on a 64-bit Windows system is divided into two parts:

    HKEY_LOCAL_MACHINE\SOFTWARE: This is where 64-bit applications store their registry entries.
    HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node: This is a special node created by the WOW64 subsystem to redirect 32-bit applications when they try to access the registry under the HKEY_LOCAL_MACHINE\SOFTWARE path. This redirection ensures that 32-bit applications access the correct part of the registry without causing conflicts with 64-bit applications.

So, when a 32-bit application writes to HKEY_LOCAL_MACHINE\SOFTWARE on a 64-bit system, it is redirected to HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node by the operating system. This redirection helps maintain separation between the registry entries for 32-bit and 64-bit applications and ensures compatibility in a mixed environment.


Why it is not using the same concept when writing on HKEY_CURRENT_USER?

The redirection concept for the registry is specific to the HKEY_LOCAL_MACHINE hive on 64-bit Windows systems. This redirection is implemented to avoid conflicts between 32-bit and 64-bit applications by directing 32-bit applications to a separate registry path (HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node).

However, when it comes to user-specific settings in the registry (e.g., settings stored under HKEY_CURRENT_USER), the redirection is not necessary. This is because each user has their own registry hive under HKEY_USERS, and 32-bit and 64-bit applications do not share the same registry space in the user-specific context.

For example:

    32-bit applications on a 64-bit system would write to HKEY_CURRENT_USER\Software without redirection.
    64-bit applications on the same system would also write to HKEY_CURRENT_USER\Software without redirection.

The user-specific registry settings are isolated to each user's profile, and there is no need for the redirection mechanism in this context. The redirection is mainly implemented at the machine level (HKEY_LOCAL_MACHINE) to avoid conflicts in a shared space between 32-bit and 64-bit applications.

Modifying the Windows Registry requires administrative privileges. Here's how you can run your C# application with elevated permissions to write to the local machine registry:

    Run Visual Studio as Administrator:

        Right-click on the Visual Studio icon.
        Select "Run as administrator."
        This will ensure that any application you run from Visual Studio inherits administrative privileges.

    Require Administrative Privileges in Your Application:

        In your C# application, you can include a manifest file that requests administrative privileges.
        Create a file named app.manifest in your project (if it doesn't already exist).
    Add the following contents to the manifest file:

<?xml version="1.0" encoding="utf-8"?>
<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
  <assemblyIdentity version="1.0.0.0" processorArchitecture="X86" name="YourAppName" type="win32" />
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel level="requireAdministrator" uiAccess="false" />
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>


        Replace "YourAppName" with the actual name of your application.

    Embed Manifest in Your Application:

        Open your project properties in Visual Studio.
        Go to the "Application" tab.
        Set "Manifest" to the path of your app.manifest file.

Now, when you run your application, it will prompt for administrative privileges. This ensures that your application has the necessary permissions to write to the local machine registry.

Keep in mind that modifying the registry requires caution, as incorrect changes can impact the system's stability. Always make sure you have a backup of the registry before making any changes, especially if your application involves writing to critical areas of the registry.

Sample Code: